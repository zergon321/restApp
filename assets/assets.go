// Code generated by go-bindata.
// sources:
// sql/customers/add_customer.sql
// sql/customers/delete_customer.sql
// sql/customers/get_all_customers.sql
// sql/customers/get_customer_by_id.sql
// sql/customers/update_customer.sql
// sql/init_db.sql
// sql/orders/add_order.sql
// sql/orders/add_service_to_order.sql
// sql/orders/delete_order.sql
// sql/orders/delete_service_from_order.sql
// sql/orders/get_all_order_services.sql
// sql/orders/get_all_orders.sql
// sql/orders/get_order_by_id.sql
// sql/orders/get_order_service_by_id.sql
// sql/orders/update_order.sql
// sql/services/add_service.sql
// sql/services/delete_service.sql
// sql/services/get_all_services.sql
// sql/services/get_service_by_id.sql
// sql/services/update_service.sql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlCustomersAdd_customerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x48\x2e\x2d\x2e\xc9\xcf\x4d\x2d\x2a\x56\xd0\x48\xce\xcf\x2d\x48\xcc\xab\x8c\xcf\x4b\xcc\x4d\xd5\x51\x80\xf1\x12\x53\x52\x8a\x52\x8b\x8b\x75\x14\x4a\x12\x2b\xe2\x33\x53\x74\x14\x52\x73\x13\x33\x73\x74\x14\x0a\x32\xf2\xf3\x52\xe3\xf3\x4a\x73\x93\x52\x8b\x34\x15\xc2\x1c\x7d\x42\x5d\x83\xb9\x34\x54\x0c\x75\x14\x54\x8c\x74\x14\x54\x8c\x75\x14\x54\x4c\x74\x14\x54\x4c\x35\xad\x01\x01\x00\x00\xff\xff\x93\xe5\xd8\xe2\x6f\x00\x00\x00")

func sqlCustomersAdd_customerSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCustomersAdd_customerSql,
		"sql/customers/add_customer.sql",
	)
}

func sqlCustomersAdd_customerSql() (*asset, error) {
	bytes, err := sqlCustomersAdd_customerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/customers/add_customer.sql", size: 111, mode: os.FileMode(436), modTime: time.Unix(1561146332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlCustomersDelete_customerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x71\xf5\x71\x0d\x71\x55\x70\x0b\xf2\xf7\x55\x48\x2e\x2d\x2e\xc9\xcf\x4d\x2d\x2a\x56\x48\xe6\x0a\xf7\x70\x0d\x72\x55\x48\xd6\xcb\x4c\x51\xb0\x55\x50\x31\xb4\x06\x04\x00\x00\xff\xff\xd7\xa6\x73\xfb\x28\x00\x00\x00")

func sqlCustomersDelete_customerSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCustomersDelete_customerSql,
		"sql/customers/delete_customer.sql",
	)
}

func sqlCustomersDelete_customerSql() (*asset, error) {
	bytes, err := sqlCustomersDelete_customerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/customers/delete_customer.sql", size: 40, mode: os.FileMode(436), modTime: time.Unix(1560970077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlCustomersGet_all_customersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x76\xf5\x71\x75\x0e\x51\xd0\xe2\x72\x0b\xf2\xf7\x55\x48\x2e\x2d\x2e\xc9\xcf\x4d\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\x60\xc0\xab\xa2\x18\x00\x00\x00")

func sqlCustomersGet_all_customersSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCustomersGet_all_customersSql,
		"sql/customers/get_all_customers.sql",
	)
}

func sqlCustomersGet_all_customersSql() (*asset, error) {
	bytes, err := sqlCustomersGet_all_customersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/customers/get_all_customers.sql", size: 24, mode: os.FileMode(436), modTime: time.Unix(1560965745, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlCustomersGet_customer_by_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x76\xf5\x71\x75\x0e\x51\xd0\xe2\x72\x0b\xf2\xf7\x55\x48\x2e\x2d\x2e\xc9\xcf\x4d\x2d\x2a\x56\x48\xe6\x0a\xf7\x70\x0d\x72\x55\x48\xd6\xcb\x4c\x51\xb0\x55\x50\x31\xb4\x06\x04\x00\x00\xff\xff\x07\x31\xd2\x5a\x2a\x00\x00\x00")

func sqlCustomersGet_customer_by_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCustomersGet_customer_by_idSql,
		"sql/customers/get_customer_by_id.sql",
	)
}

func sqlCustomersGet_customer_by_idSql() (*asset, error) {
	bytes, err := sqlCustomersGet_customer_by_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/customers/get_customer_by_id.sql", size: 42, mode: os.FileMode(436), modTime: time.Unix(1560964580, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlCustomersUpdate_customerSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x0d\x70\x71\x0c\x71\x55\x48\x2e\x2d\x2e\xc9\xcf\x4d\x2d\x2a\xe6\x0a\x76\x0d\x51\x48\xce\xcf\x2d\x48\xcc\xab\x8c\xcf\x4b\xcc\x4d\x55\xb0\x55\x50\x31\xd2\x81\x0b\x25\xa6\xa4\x14\xa5\x16\x17\x83\x44\x8d\x75\x14\x4a\x12\x2b\xe2\x33\x53\x40\x1c\x13\x1d\x85\xd4\xdc\xc4\xcc\x1c\x10\xdb\x54\x47\xa1\x20\x23\x3f\x2f\x35\x3e\xaf\x34\x37\x29\xb5\x08\x24\x64\xc6\x15\xee\xe1\x1a\xe4\xaa\x00\x51\x6c\x68\x0d\x08\x00\x00\xff\xff\xb6\x01\x6a\xc2\x77\x00\x00\x00")

func sqlCustomersUpdate_customerSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCustomersUpdate_customerSql,
		"sql/customers/update_customer.sql",
	)
}

func sqlCustomersUpdate_customerSql() (*asset, error) {
	bytes, err := sqlCustomersUpdate_customerSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/customers/update_customer.sql", size: 119, mode: os.FileMode(436), modTime: time.Unix(1561149578, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlInit_dbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x5f\x6b\xf2\x30\x18\x47\xef\xfb\x29\x7e\x97\x2d\x78\xa3\xbc\xbe\x6c\x78\x95\xb5\x8f\xac\x2c\xd6\x2d\xb6\x03\xaf\x42\xd6\x04\x16\xb0\xad\xa4\x71\x6c\xdf\x7e\xf8\xa7\x58\xab\x03\xaf\x9f\x93\xd3\x1f\xa7\xb1\x20\x96\x13\x72\xf6\xc4\x09\xe5\xae\xf5\x4d\x65\x5c\x8b\x30\x00\x00\xab\xb1\x22\x91\x32\x8e\x57\x91\x2e\x98\x58\xe3\x85\xd6\xa3\xc3\xa9\x6c\xaa\xad\xaa\x7f\x64\xad\x2a\x83\x77\x26\xe2\x67\x26\x10\x8e\x27\x0f\x11\xb2\x65\x8e\xac\xe0\xfc\x12\x54\x5a\x3b\xd3\xb6\x67\x76\x32\xfd\x3f\x64\xbd\xfa\x96\x56\xa3\x73\x45\x28\xb2\xf4\xad\xa0\x01\x65\x2a\x65\x37\x03\xcf\x4d\x70\xfb\xd9\xd4\x46\xd6\xbb\xea\xc3\xb8\x83\x34\x1c\xff\xbb\x42\x83\x68\x16\x04\x17\x15\x1a\xa7\xef\x4b\x70\xaa\x25\xcf\x8c\xa0\x39\x09\xca\x62\x5a\xf5\x5a\x2e\x33\x24\xc4\x29\x27\xc4\x6c\x15\xb3\x84\xba\x30\xb5\x77\xaa\xf4\x52\x2b\x6f\x90\xec\xbf\xdf\x6d\x42\x42\x73\x56\xf0\x1c\x71\x21\x04\x65\xb9\xdc\x5f\xaf\x87\xb6\xc6\x7d\xd9\xd2\xdc\x31\xd5\x5b\xbf\x31\xf7\x24\x3b\x29\xa5\x36\x6d\xe9\xec\xd6\xdb\xa6\x3e\x3f\x9b\xee\x7f\xc9\x20\xb1\xb3\xa5\x41\x42\x71\xba\x60\x1c\xe1\xe3\x08\x3d\x04\x7f\xb5\x95\xbe\x91\x83\xf1\x87\xc3\xed\x92\xc7\x37\x97\xfb\x6e\x82\x9d\xf2\x88\xf6\x22\x20\xec\xf4\xa3\x9e\x21\x0a\xa2\xd9\x6f\x00\x00\x00\xff\xff\x90\x53\xad\xec\xff\x02\x00\x00")

func sqlInit_dbSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlInit_dbSql,
		"sql/init_db.sql",
	)
}

func sqlInit_dbSql() (*asset, error) {
	bytes, err := sqlInit_dbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/init_db.sql", size: 767, mode: os.FileMode(436), modTime: time.Unix(1561146955, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersAdd_orderSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\xc8\x2f\x4a\x49\x2d\x2a\x56\xd0\x48\x2e\x2d\x2e\xc9\xcf\x4d\x2d\x8a\xcf\x4c\xd1\x51\x48\xce\xcf\x2b\x29\x4a\x4c\x2e\x89\x4f\x49\x2c\x49\xd5\x54\x08\x73\xf4\x09\x75\x0d\xe6\xd2\x50\x31\xd4\x51\x50\x31\xd2\xb4\x06\x04\x00\x00\xff\xff\x4b\xa7\xb0\x9c\x40\x00\x00\x00")

func sqlOrdersAdd_orderSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersAdd_orderSql,
		"sql/orders/add_order.sql",
	)
}

func sqlOrdersAdd_orderSql() (*asset, error) {
	bytes, err := sqlOrdersAdd_orderSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/add_order.sql", size: 64, mode: os.FileMode(436), modTime: time.Unix(1561226456, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersAdd_service_to_orderSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\xc8\x2f\x4a\x49\x2d\x2a\x8e\x2f\xc9\x8f\x2f\x4e\x2d\x2a\xcb\x4c\x4e\x2d\x56\xd0\x00\x8b\xc5\x67\xa6\xe8\x28\x40\xc5\xe2\x33\x53\x34\x15\xc2\x1c\x7d\x42\x5d\x83\xb9\x34\x54\x0c\x75\x14\x54\x8c\x34\xad\x01\x01\x00\x00\xff\xff\x39\x83\x3f\xcd\x46\x00\x00\x00")

func sqlOrdersAdd_service_to_orderSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersAdd_service_to_orderSql,
		"sql/orders/add_service_to_order.sql",
	)
}

func sqlOrdersAdd_service_to_orderSql() (*asset, error) {
	bytes, err := sqlOrdersAdd_service_to_orderSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/add_service_to_order.sql", size: 70, mode: os.FileMode(436), modTime: time.Unix(1561296442, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersDelete_orderSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x71\xf5\x71\x0d\x71\x55\x70\x0b\xf2\xf7\x55\xc8\x2f\x4a\x49\x2d\x2a\x56\xc8\xe7\x0a\xf7\x70\x0d\x72\x55\xc8\xd7\xcb\x4c\x51\xb0\x55\x50\x31\xb4\x06\x04\x00\x00\xff\xff\x37\xe3\x18\xed\x25\x00\x00\x00")

func sqlOrdersDelete_orderSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersDelete_orderSql,
		"sql/orders/delete_order.sql",
	)
}

func sqlOrdersDelete_orderSql() (*asset, error) {
	bytes, err := sqlOrdersDelete_orderSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/delete_order.sql", size: 37, mode: os.FileMode(436), modTime: time.Unix(1561226220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersDelete_service_from_orderSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x71\xf5\x71\x0d\x71\x55\x70\x0b\xf2\xf7\x55\xc8\x2f\x4a\x49\x2d\x2a\x8e\x2f\xc9\x8f\x2f\x4e\x2d\x2a\xcb\x4c\x4e\x2d\xe6\x0a\xf7\x70\x0d\x72\x85\x48\xc4\x67\xa6\x28\xd8\x2a\xa8\x18\x2a\x38\xfa\xb9\x28\x40\x15\x40\xc5\x8c\xac\x01\x01\x00\x00\xff\xff\x0b\xec\x33\x5b\x47\x00\x00\x00")

func sqlOrdersDelete_service_from_orderSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersDelete_service_from_orderSql,
		"sql/orders/delete_service_from_order.sql",
	)
}

func sqlOrdersDelete_service_from_orderSql() (*asset, error) {
	bytes, err := sqlOrdersDelete_service_from_orderSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/delete_service_from_order.sql", size: 71, mode: os.FileMode(436), modTime: time.Unix(1561296660, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersGet_all_order_servicesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x0a\x02\x31\x0c\x40\xf7\x7e\x45\x06\x47\x29\x38\x8b\x93\x54\x3c\xd1\x16\xaa\xe0\xd8\xa1\xc9\x10\x10\x73\x24\xc5\xef\x97\x9e\xa7\xde\x16\x1e\xef\x25\xb9\x86\x73\xd8\xdf\xc0\x3c\xe3\x1a\xcc\x37\x6e\x0f\xea\x83\x91\xbe\xb8\x52\x41\xb2\xaa\x3c\x36\x96\x67\xc7\xa3\x72\x25\x77\xc8\xe9\x02\xa2\x48\x6a\x20\x6e\x88\x31\x64\x38\xa5\x21\xce\xac\x34\x29\x73\x6f\x20\xe6\x52\x04\xf1\x8c\xb0\x03\x31\x3f\x29\x85\x71\x99\xfd\xe4\x8f\xfb\xbf\x3e\x45\xfd\x37\x77\x3f\x86\x1c\xbe\x6b\x56\x9b\xed\x3b\x00\x00\xff\xff\xd0\x25\xd8\x2a\xb8\x00\x00\x00")

func sqlOrdersGet_all_order_servicesSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersGet_all_order_servicesSql,
		"sql/orders/get_all_order_services.sql",
	)
}

func sqlOrdersGet_all_order_servicesSql() (*asset, error) {
	bytes, err := sqlOrdersGet_all_order_servicesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/get_all_order_services.sql", size: 184, mode: os.FileMode(436), modTime: time.Unix(1561296113, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersGet_all_ordersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x76\xf5\x71\x75\x0e\x51\xd0\xe2\x72\x0b\xf2\xf7\x55\xc8\x2f\x4a\x49\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\x57\x50\x02\x28\x15\x00\x00\x00")

func sqlOrdersGet_all_ordersSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersGet_all_ordersSql,
		"sql/orders/get_all_orders.sql",
	)
}

func sqlOrdersGet_all_ordersSql() (*asset, error) {
	bytes, err := sqlOrdersGet_all_ordersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/get_all_orders.sql", size: 21, mode: os.FileMode(436), modTime: time.Unix(1561225983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersGet_order_by_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x76\xf5\x71\x75\x0e\x51\xd0\xe2\x72\x0b\xf2\xf7\x55\xc8\x2f\x4a\x49\x2d\x2a\x56\xc8\xe7\x0a\xf7\x70\x0d\x72\x55\xc8\xd7\xcb\x4c\x51\xb0\x55\x50\x31\xb4\x06\x04\x00\x00\xff\xff\xa0\x01\x30\xdc\x27\x00\x00\x00")

func sqlOrdersGet_order_by_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersGet_order_by_idSql,
		"sql/orders/get_order_by_id.sql",
	)
}

func sqlOrdersGet_order_by_idSql() (*asset, error) {
	bytes, err := sqlOrdersGet_order_by_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/get_order_by_id.sql", size: 39, mode: os.FileMode(436), modTime: time.Unix(1561225925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersGet_order_service_by_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xbd\x0a\x42\x31\x0c\x46\xf7\x3e\x45\x06\x47\x29\xe8\x2a\x0e\xa2\x15\xaf\x68\x0b\x55\x70\xec\xd0\x66\x08\x88\xb9\x24\xc5\xe7\x97\xd6\xeb\xcf\x96\x7c\x39\x27\xc9\xc5\x9d\xdc\xf6\x0a\x6a\xa9\xcc\x41\x6d\xa5\x7a\xc7\x56\x28\xca\x93\x32\xa6\x82\x9a\x85\xc6\x4a\xfc\x68\xf1\x28\x94\xd1\xec\x63\x38\x03\x4b\x41\x51\x60\x33\x78\xef\x22\x1c\xc3\xe0\xa7\x2c\x55\x4e\x93\xaf\xc0\x6a\x82\x07\xb6\x54\x60\x0d\xac\xb6\x23\x89\xca\xbf\xf6\x85\xdf\xec\xef\x7a\x97\xda\x6f\xe6\x76\x70\xd1\x7d\xd6\xcc\x16\xb0\xf1\xbb\x3e\x68\xdd\x72\xf5\x0a\x00\x00\xff\xff\xf0\xb1\xa3\x2b\xc6\x00\x00\x00")

func sqlOrdersGet_order_service_by_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersGet_order_service_by_idSql,
		"sql/orders/get_order_service_by_id.sql",
	)
}

func sqlOrdersGet_order_service_by_idSql() (*asset, error) {
	bytes, err := sqlOrdersGet_order_service_by_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/get_order_service_by_id.sql", size: 198, mode: os.FileMode(436), modTime: time.Unix(1561297256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlOrdersUpdate_orderSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x0d\x70\x71\x0c\x71\x55\xc8\x2f\x4a\x49\x2d\x2a\xe6\x0a\x76\x0d\x51\x48\xce\xcf\x2b\x29\x4a\x4c\x2e\x89\x4f\x49\x2c\x49\x55\xb0\x55\x50\x31\xe2\x0a\xf7\x70\x0d\x72\x55\xc8\x4c\x01\xf1\x0c\xad\x01\x01\x00\x00\xff\xff\x63\x45\x3d\xdb\x33\x00\x00\x00")

func sqlOrdersUpdate_orderSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlOrdersUpdate_orderSql,
		"sql/orders/update_order.sql",
	)
}

func sqlOrdersUpdate_orderSql() (*asset, error) {
	bytes, err := sqlOrdersUpdate_orderSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/orders/update_order.sql", size: 51, mode: os.FileMode(436), modTime: time.Unix(1561226322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlServicesAdd_serviceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\xf4\x0b\x76\x0d\x0a\x51\xf0\xf4\x0b\xf1\x57\x28\x4e\x2d\x2a\xcb\x4c\x4e\x2d\x56\xd0\x28\xc9\x2c\xc9\x49\xd5\x81\x09\xc4\xa7\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\xe9\x28\x14\x14\x65\x26\xa7\x6a\x2a\x84\x39\xfa\x84\xba\x06\x73\x69\xa8\x18\xea\x28\xa8\x18\xe9\x28\xa8\x18\x6b\x5a\x03\x02\x00\x00\xff\xff\x73\x9d\xe1\x07\x4d\x00\x00\x00")

func sqlServicesAdd_serviceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlServicesAdd_serviceSql,
		"sql/services/add_service.sql",
	)
}

func sqlServicesAdd_serviceSql() (*asset, error) {
	bytes, err := sqlServicesAdd_serviceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/services/add_service.sql", size: 77, mode: os.FileMode(436), modTime: time.Unix(1561218567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlServicesDelete_serviceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x71\xf5\x71\x0d\x71\x55\x70\x0b\xf2\xf7\x55\x28\x4e\x2d\x2a\xcb\x4c\x4e\x2d\x56\x28\xe6\x0a\xf7\x70\x0d\x72\x55\x28\xd6\xcb\x4c\x51\xb0\x55\x50\x31\xb4\x06\x04\x00\x00\xff\xff\x5d\x50\x48\x45\x27\x00\x00\x00")

func sqlServicesDelete_serviceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlServicesDelete_serviceSql,
		"sql/services/delete_service.sql",
	)
}

func sqlServicesDelete_serviceSql() (*asset, error) {
	bytes, err := sqlServicesDelete_serviceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/services/delete_service.sql", size: 39, mode: os.FileMode(436), modTime: time.Unix(1561218609, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlServicesGet_all_servicesSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x76\xf5\x71\x75\x0e\x51\xd0\xe2\x72\x0b\xf2\xf7\x55\x28\x4e\x2d\x2a\xcb\x4c\x4e\x2d\xb6\x06\x04\x00\x00\xff\xff\xab\xc1\x9c\xf6\x17\x00\x00\x00")

func sqlServicesGet_all_servicesSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlServicesGet_all_servicesSql,
		"sql/services/get_all_services.sql",
	)
}

func sqlServicesGet_all_servicesSql() (*asset, error) {
	bytes, err := sqlServicesGet_all_servicesSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/services/get_all_services.sql", size: 23, mode: os.FileMode(436), modTime: time.Unix(1561218644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlServicesGet_service_by_idSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x76\xf5\x71\x75\x0e\x51\xd0\xe2\x72\x0b\xf2\xf7\x55\x28\x4e\x2d\x2a\xcb\x4c\x4e\x2d\x56\x28\xe6\x0a\xf7\x70\x0d\x72\x55\x28\xd6\xcb\x4c\x51\xb0\x55\x50\x31\xb4\x06\x04\x00\x00\xff\xff\xfc\xfe\x4c\x35\x29\x00\x00\x00")

func sqlServicesGet_service_by_idSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlServicesGet_service_by_idSql,
		"sql/services/get_service_by_id.sql",
	)
}

func sqlServicesGet_service_by_idSql() (*asset, error) {
	bytes, err := sqlServicesGet_service_by_idSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/services/get_service_by_id.sql", size: 41, mode: os.FileMode(436), modTime: time.Unix(1561218804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlServicesUpdate_serviceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x0d\x70\x71\x0c\x71\x55\x28\x4e\x2d\x2a\xcb\x4c\x4e\x2d\xe6\x0a\x76\x0d\x51\x28\xc9\x2c\xc9\x49\x55\xb0\x55\x50\x31\xd2\x81\x49\xc4\xa7\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x81\x64\x8c\x75\x14\x0a\x8a\x32\x93\xc1\xaa\x4c\xb8\xc2\x3d\x5c\x83\x5c\x15\x32\x53\x40\x3c\x43\x6b\x40\x00\x00\x00\xff\xff\xcd\x0c\x03\xd1\x53\x00\x00\x00")

func sqlServicesUpdate_serviceSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlServicesUpdate_serviceSql,
		"sql/services/update_service.sql",
	)
}

func sqlServicesUpdate_serviceSql() (*asset, error) {
	bytes, err := sqlServicesUpdate_serviceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/services/update_service.sql", size: 83, mode: os.FileMode(436), modTime: time.Unix(1561218881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/customers/add_customer.sql": sqlCustomersAdd_customerSql,
	"sql/customers/delete_customer.sql": sqlCustomersDelete_customerSql,
	"sql/customers/get_all_customers.sql": sqlCustomersGet_all_customersSql,
	"sql/customers/get_customer_by_id.sql": sqlCustomersGet_customer_by_idSql,
	"sql/customers/update_customer.sql": sqlCustomersUpdate_customerSql,
	"sql/init_db.sql": sqlInit_dbSql,
	"sql/orders/add_order.sql": sqlOrdersAdd_orderSql,
	"sql/orders/add_service_to_order.sql": sqlOrdersAdd_service_to_orderSql,
	"sql/orders/delete_order.sql": sqlOrdersDelete_orderSql,
	"sql/orders/delete_service_from_order.sql": sqlOrdersDelete_service_from_orderSql,
	"sql/orders/get_all_order_services.sql": sqlOrdersGet_all_order_servicesSql,
	"sql/orders/get_all_orders.sql": sqlOrdersGet_all_ordersSql,
	"sql/orders/get_order_by_id.sql": sqlOrdersGet_order_by_idSql,
	"sql/orders/get_order_service_by_id.sql": sqlOrdersGet_order_service_by_idSql,
	"sql/orders/update_order.sql": sqlOrdersUpdate_orderSql,
	"sql/services/add_service.sql": sqlServicesAdd_serviceSql,
	"sql/services/delete_service.sql": sqlServicesDelete_serviceSql,
	"sql/services/get_all_services.sql": sqlServicesGet_all_servicesSql,
	"sql/services/get_service_by_id.sql": sqlServicesGet_service_by_idSql,
	"sql/services/update_service.sql": sqlServicesUpdate_serviceSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"customers": &bintree{nil, map[string]*bintree{
			"add_customer.sql": &bintree{sqlCustomersAdd_customerSql, map[string]*bintree{}},
			"delete_customer.sql": &bintree{sqlCustomersDelete_customerSql, map[string]*bintree{}},
			"get_all_customers.sql": &bintree{sqlCustomersGet_all_customersSql, map[string]*bintree{}},
			"get_customer_by_id.sql": &bintree{sqlCustomersGet_customer_by_idSql, map[string]*bintree{}},
			"update_customer.sql": &bintree{sqlCustomersUpdate_customerSql, map[string]*bintree{}},
		}},
		"init_db.sql": &bintree{sqlInit_dbSql, map[string]*bintree{}},
		"orders": &bintree{nil, map[string]*bintree{
			"add_order.sql": &bintree{sqlOrdersAdd_orderSql, map[string]*bintree{}},
			"add_service_to_order.sql": &bintree{sqlOrdersAdd_service_to_orderSql, map[string]*bintree{}},
			"delete_order.sql": &bintree{sqlOrdersDelete_orderSql, map[string]*bintree{}},
			"delete_service_from_order.sql": &bintree{sqlOrdersDelete_service_from_orderSql, map[string]*bintree{}},
			"get_all_order_services.sql": &bintree{sqlOrdersGet_all_order_servicesSql, map[string]*bintree{}},
			"get_all_orders.sql": &bintree{sqlOrdersGet_all_ordersSql, map[string]*bintree{}},
			"get_order_by_id.sql": &bintree{sqlOrdersGet_order_by_idSql, map[string]*bintree{}},
			"get_order_service_by_id.sql": &bintree{sqlOrdersGet_order_service_by_idSql, map[string]*bintree{}},
			"update_order.sql": &bintree{sqlOrdersUpdate_orderSql, map[string]*bintree{}},
		}},
		"services": &bintree{nil, map[string]*bintree{
			"add_service.sql": &bintree{sqlServicesAdd_serviceSql, map[string]*bintree{}},
			"delete_service.sql": &bintree{sqlServicesDelete_serviceSql, map[string]*bintree{}},
			"get_all_services.sql": &bintree{sqlServicesGet_all_servicesSql, map[string]*bintree{}},
			"get_service_by_id.sql": &bintree{sqlServicesGet_service_by_idSql, map[string]*bintree{}},
			"update_service.sql": &bintree{sqlServicesUpdate_serviceSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

